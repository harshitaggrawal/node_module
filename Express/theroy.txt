->  npm i Express;

Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications. It is designed to simplify the process of writing server-side code by offering powerful tools and utilities that make it easier to create and manage web applications.

Why Use Express.js?

Simplifies Server Creation: Express.js abstracts the complexities of setting up a server in Node.js, allowing developers to create a robust web server with minimal code. You can define routes, handle requests and responses, and serve static files easily.

Middleware Support: Express.js uses a middleware architecture, which allows developers to add functionality to the server by stacking different middleware functions. This makes it easy to handle tasks like logging, parsing JSON, URL-encoded data, and handling sessions.

Routing: Express.js offers a simple and intuitive way to manage routes. You can define routes for different HTTP methods (GET, POST, PUT, DELETE) and handle them separately, making it easy to build RESTful APIs.

Integration with Databases: Express.js can be easily integrated with various databases, such as MongoDB, MySQL, or PostgreSQL. You can use it with ORMs (Object-Relational Mappers) like Mongoose for MongoDB or Sequelize for SQL databases.

Extensive Ecosystem: Express.js has a large ecosystem of plugins and extensions. You can add features like authentication, validation, security, and more, using community-built middleware or your custom middleware.

Full Control: Unlike some other frameworks that might be more opinionated, Express.js gives developers full control over how they structure their application, making it flexible and adaptable to various use cases.

Scalability: Express.js is lightweight and unopinionated, which makes it a good choice for applications that need to scale. You can build simple one-page applications or complex, multi-page applications with the same framework.


MIDDLEWARE:

Middleware in Express.js is a fundamental concept that allows you to handle requests and responses systematically. Middleware functions can be used to execute code, make changes to the request and response objects, end the request-response cycle, and call the next middleware function.

Key Features of Middleware in Express.js:
Execution Order:
Middleware functions are executed sequentially, in the order they are defined in your application.

Request-Response Cycle:
Middleware functions have access to the request object (req), the response object (res), and the next function in the applicationâ€™s request-response cycle, often referred to as next().

Chainable:
Middleware can be chained together to form a stack, where each middleware function passes control to the next one using next().


Types of Middleware

Application-Level Middleware:
These middleware functions are bound to an instance of the app object and are executed on every request.

const express = require('express');
const app = express();

app.use((req, res, next) => {
  console.log('Time:', Date.now());
  next(); // Pass control to the next middleware function
});

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000);


Router-Level Middleware:
These middleware functions are bound to an instance of express.Router(), and are often used to group related routes.

const router = express.Router();

router.use((req, res, next) => {
  console.log('Request URL:', req.originalUrl);
  next();
});

router.get('/user/:id', (req, res) => {
  res.send('User Info');
});

app.use('/user', router);


Error-Handling Middleware:
Error-handling middleware is used to catch and handle errors. It requires four arguments: (err, req, res, next).


app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});


Built-in Middleware:
Express comes with some built-in middleware functions like express.static for serving static files and express.json for parsing JSON request bodies.


app.use(express.json()); // Parse JSON bodies
app.use(express.static('public')); // Serve static files from the "public" directory


Third-Party Middleware:
You can integrate third-party middleware into your Express.js application to add more functionality, such as logging, authentication, and session management.

const cookieParser = require('cookie-parser');
app.use(cookieParser()); // Parse cookies